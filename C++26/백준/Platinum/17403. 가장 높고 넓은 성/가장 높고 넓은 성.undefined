#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <stack>
#include <numeric>

using namespace std;

vector<int> lv;
int lvnum = 1;

int ccw(tuple<int, int, int>& a, tuple<int, int, int>& b, tuple<int, int, int>& c)
{
	int ax, ay, bx, by, cx, cy, s;
	tie(ax, ay, s) = a;
	tie(bx, by, s) = b;
	tie(cx, cy, s) = c;
	s = ax * by * 1LL + bx * cy * 1LL + cx * ay * 1LL - ay * bx * 1LL - by * cx * 1LL - cy * ax * 1LL;
	if (s > 0)
		return 1;
	else if (s < 0)
		return -1;
	else
		return 0;
}

void convex(vector<tuple<int, int, int>>& p, const int& n)
{
	vector<tuple<int, int, int>> u;
	vector<tuple<int, int, int>> l;
	sort(p.begin(), p.end());
	u.push_back(p[0]);
	u.push_back(p[1]);
	l.push_back(p[n - 1]);
	l.push_back(p[n - 2]);
	for (int i = 2; i < n; i++)
	{
		for (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], p[i]) != 1; j--)
			u.pop_back();
		u.push_back(p[i]);
	}
	for (int i = p.size() - 3; i >= 0; i--)
	{
		for (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], p[i]) != 1; j--)
			l.pop_back();
		l.push_back(p[i]);
	}
	if (u.size() + l.size() - 2 > 2)
	{
		for (auto& i : u)
		{
			lv[get<2>(i)] = lvnum;
		}
		for (auto& i : l)
		{
			lv[get<2>(i)] = lvnum;
		}
		lvnum++;
		vector<tuple<int, int, int>> next;
		if (n - u.size() - l.size() + 2 >= 3)
		{
			for (auto& i : p)
			{
				if (lv[get<2>(i)] == 0)
					next.push_back(i);
			}
			convex(next, next.size());
		}
	}
	return;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr), cout.tie(nullptr);
	int n;
	cin >> n;
	vector<tuple<int, int, int>> p(n);
	lv.resize(n);
	int x, y;
	for (int i = 0; i < n; i++)
	{
		cin >> x >> y;
		p[i] = tie(x, y, i);
	}
	convex(p, n);
	for (auto& i : lv)
		cout << i << ' ';
	return 0;
}